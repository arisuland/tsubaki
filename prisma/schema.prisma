datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "go run github.com/prisma/prisma-client-go"
}

enum AccessTokenScope {
  // This token is allowed to write data into any repository
  // this user owns or has access.
  PUBLIC_WRITE

  // This token is allowed to create a repository beyond
  // this user's behalf.
  REPO_CREATE

  // This token is allowed to delete any repositories beyond
  // this user's behalf.
  REPO_DELETE

  // This token is allowed to modify any data of a repository
  // beyond this user's behalf.
  REPO_UPDATE
}

model User {
  gravatarEmail String?
  avatarUrl     String?
  accessTokens  AccessToken[]
  useGravatar   Boolean       @default(false)
  description   String?
  updatedAt     DateTime      @updatedAt @map("updated_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  username      String        @unique // username is unique
  disabled      Boolean       @default(false)
  projects      Project[]
  password      String
  flags         Int           @default(0)
  email         String        @unique // email is unique
  name          String?
  id            String        @id

  @@map("users")
}

model Project {
  description String?
  subprojects Subproject[]
  updatedAt   DateTime     @updatedAt @map("updated_at")
  createdAt   DateTime     @default(now()) @map("created_at")
  ownerId     String       @map("owner_id")
  owner       User         @relation(fields: [ownerId], references: [id])
  flags       Int          @default(0)
  name        String
  id          String       @id

  @@map("projects")
}

model AccessToken {
  expiresIn DateTime?
  ownerId   String             @unique @map("owner_id")
  scopes    AccessTokenScope[]
  owner     User               @relation(fields: [ownerId], references: [id])
  token     String
  id        String             @id

  @@map("access_tokens")
}

model Subproject {
  description String?
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")
  parentId    String
  parent      Project  @relation(fields: [parentId], references: [id])
  name        String
  id          String   @id

  @@map("subprojects")
}
